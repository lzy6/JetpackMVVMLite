<resources>
    <string name="app_name">JetpackMVVMLite</string>
    <string name="drawer_open">Open</string>
    <string name="drawer_close">Close</string>
    <string name="issue">发布</string>

    <string name="brief_introduction">现在找一个优秀的MVP或MVVM框架并不难，github上随便一搜就可以搜到10k以上的框架，选择使用开源优秀框架可以帮助自己快速开发，
        减少bug，增加稳定性...我以前也是这么做的,用别人的框架用了两年多，到后来我发现其实使用别人的框架是一件成本很高的事。\n
        1、成熟稳定的框架往往比较大，文件比较多，真的适合目前的项目么。\n
        2、自己更改架构，或更换某个组件，会发现很困难\n
        3、遇到架构上的问题，会想着去issues看看，很少自己去分析，依赖性太强\n
        所以我想做一个适合我，适合公司，适合项目的框架。一个优秀的代码应该是高内聚，低耦合。通过组件特性、设计模式、基本封装减少样板代码，让开发者更多的关注业务实现。开放接口。提高稳定性。
        </string>

    <string name="features">
    · 框架设计轻量，引用目前主流且较新功能偏专一的组件\n
    · kotlin的特性、高阶函数可以减少更多的样板代码，支持compose等\n
    · 更多的自定义拓展方法，实现功能更方便\n
    · jetpack组件减少代码不一致，减少开发者的学习成本\n
    · 请求API代码简约，不需要关注绑定生命周期与切换线程</string>

    <string name="why_use_viewbinding">findViewById->Butterknife->DataBinding->Kotlin synthetic->ViewBinding\n
        刚开始做安卓时用了很短时间的findViewById，然后就用上了Butterknife,换成DataBinding的原因是Butterknife要在activity声明控件并注入，需要写大量代码。
    DataBinding没用多久，虽然它支持双向绑定，但是入侵了xml，复杂业务逻辑下xml会变得很复杂，维护成本，其他开发学习成本都很大。后来用了Kotlin synthetic，Kotlin自带，不需要集成
    三方库，有个问题是如果xml声明ID没注意，写错或漏了，Kotlin synthetic报的错会很难排查，后来是因为google不推荐使用这个并且要废弃了，就选择了ViewBinding，它相比DataBinding更
    轻量，不需要写过多的声明代码，只需要在activity/fragment中声明出对应布局的ViewBinding就好了</string>

    <string name="why_use_load_image">ImageLoader->Glide->coil\n
    第一个是ImageLoader，换掉它是因为它在使用上很麻烦，不支持生命周期，什么都需要开发者去处理。用了Glide给我的第一个感觉是原来图片加载还可以这么方便，Glide用的最久，
    近期用了coil，因为它比较轻量，方法数几乎是Glide的一半，完全由kotlin编写有更好的支持，用Glide+kotlin的拓展方法展示形式与coil一样，所以最后选择了coil</string>

    <string name="why_use_event">RxBus->EventBus->LiveEventBus\n
    用RxJava时第一个想到RxBus，风格统一，并且依赖Rxjava实现RxBus只需要一个文件。后来用了EventBus,也是想有换掉Rxjava做准备，
        后来写自己的框架，用上了LiveData，基于LiveData实现的LiveEventBus，支持生命周期管理，不需要开发者关注注册/注销</string>

    <string name="code_event">"```\n"
                "//发送消息\n"
                "LiveEventBus.get(Constant.EVENT).post(\"\")\n"
                "\n"
                "//接受消息\n"
                "LiveEventBus.get(Constant.EVENT)\n"
                "    .observe(this, Observer {     \n"
                "     \n"
                "})\n"
                "```"</string>

    <string name="code_net_request">"```\n"
                "val singLD = StateLiveData&lt;T&gt;()\n"
                "fun sing() = launchUI(\n"
                "        response = { api.singApi().data!! },\n"
                "        liveData = singLD\n"
                "    )\n"
                "```"</string>

    <string name="code_api_result">"```\n"
                "viewModel.run {\n"
                "      //分页回调\n"
                "      observe(pageLD, ::setData).toState(::pageState)\n"
                "      //单个实体回调\n"
                "      observe(singLD) {}.toState(::dialogState)\n"
                "  }\n"
                "```"</string>

    <string name="code_activity_viewbinding">"```\n"
        "private val viewBind by viewBinding(ActivityMainBinding::inflate)\n"
        "```"</string>
    <string name="code_fragment_viewbinding">"```\n" 
        "private val viewBind by viewBinding(FragmentTestBinding::bind)\n" 
        "```"</string>
    
    <string name="code_custom_method_override_method">"```\n"
        "viewpager2.setOnPageChangeListener { \n"
        "}\n"
        "\n"
        "editText.setOnTextChanged { s, start, before, count ->\n"
        "}\n"
        "```"</string>

    <string name="code_custom_click">"```\n"
        "view.onClick{}\n"
        "```"</string>
    <string name="code_custom_del_line">"```\n"
        "textView.centerLine()\n"
        "```"</string>
    <string name="code_custom_skeleton">"```\n"
        "recyclerView.initSkeletonRecyclerView(adapter)\n"
        "```"</string>
    <string name="code_custom_download">"```\n"
        "fileDownloader(context, downloadUrl,\n"
        "    completed = {},\n"
        "    pending = {},\n"
        "    progress = { soFarBytes, totalBytes ->\n"
        "\t\t\n"
        "    })\n"
        "```"</string>
    <string name="code_custom_protocol">"```\n"
        "textView.protocol(\"...《用户协议》和《隐私政策》...\") {\n"
        "            when(it){\n"
        "                0 -> startKtxActivity&lt;WebViewActivity&gt;(Constant.USER_PROTOCOL)\n"
        "                1 -> startKtxActivity&lt;WebViewActivity&gt;(Constant.PRIVACY_PROTOCOL)\n"
        "            }\n"
        "        }\n"
        "```"</string>
</resources>